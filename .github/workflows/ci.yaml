---
name: Continuous Integration

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/badges/*.svg'

env:
  IMAGE_NAME: fakebank

jobs:
  vale:
    name: Vale
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: errata-ai/vale-action@reviewdog
        with:
          fail_on_error: true
          reporter: github-check
          vale_flags: "--glob=*.{md,txt}"
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  lint:
    name: Super-Linter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # Full git history is needed to get a proper list of changed files
          # within `super-linter`
          fetch-depth: 0
      - uses: super-linter/super-linter/slim@v6
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IGNORE_GENERATED_FILES: true
          SUPPRESS_POSSUM: true
          VALIDATE_CHECKOV: false
          VALIDATE_EDITORCONFIG: false
          VALIDATE_GITHUB_ACTIONS: false
          VALIDATE_GOOGLE_JAVA_FORMAT: false
          VALIDATE_HTML: false
          VALIDATE_JAVA: false
          VALIDATE_JSCPD: false
          VALIDATE_NATURAL_LANGUAGE: false
          VALIDATE_SQLFLUFF: false
          VALIDATE_TERRAFORM_TFLINT: false
  build:
    name: Build
    needs: [vale, lint]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'
      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Maven Dependency Tree Dependency Submission
        uses: advanced-security/maven-dependency-submission-action@v4.0.2
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - name: Generate JaCoCo Badge
        uses: cicirello/jacoco-badge-generator@v2
        with:
          generate-branches-badge: true
          jacoco-csv-file: fakebank-impl/target/site/jacoco/jacoco.csv
          coverage-label: Coverage
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.CREATE_PR_TOKEN }}
          title: "Update Jacoco coverage badge"
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          author: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>
          run:
            cp -R icm-impl/target/site/jacoco/ docs/coverage
          add-paths: |
            .github/badges/*.svg
            docs/coverage
      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: icm-impl/target/site/jacoco/
  build-store-image:
    name: Build and store image
    needs: [vale, build]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: 'Build fakebank image'
        run: |
          docker build --file docker-compose/Dockerfile.fakebank . --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
