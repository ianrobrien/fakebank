---
name: Continuous Integration

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/badges/*.svg'
      - 'www/coverage/**'

env:
  IMAGE_NAME: fakebank

jobs:
#  changes:
#    name: "Checking folders for changes"
#    runs-on: ubuntu-latest
#    outputs:
#      app: ${{ steps.changes.outputs.app }}
#    steps:
#      - name: "Checkout"
#        uses: actions/checkout@v4
#      - uses: dorny/paths-filter@v3.0.2
#        id: changes
#        with:
#          filters: |
#            app:
#              - 'fakebank-impl/**'
#              - 'fakebake-api/**'
  vale:
    name: Vale
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: errata-ai/vale-action@reviewdog
        with:
          fail_on_error: true
          reporter: github-check
          vale_flags: "--glob=*.{md,txt}"
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  build:
    needs: [vale]
#    if: ${{ needs.changes.outputs.app == 'true' }}
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'
      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Maven Dependency Tree Dependency Submission
        uses: advanced-security/maven-dependency-submission-action@v4.1.1
      - name: Build with Maven
        run: mvn -B package --file pom.xml -P coverage
      - name: Publish package
        run: mvn --batch-mode deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate JaCoCo Badge
        uses: cicirello/jacoco-badge-generator@v2
        with:
          generate-branches-badge: true
          jacoco-csv-file: www/coverage/jacoco.csv
          coverage-label: Coverage
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.CREATE_PR_TOKEN }}
          title: "[create-pull-request] Update Jacoco coverage report"
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          commit-message: |
            Update Jacoco coverage report from commit ${{ github.sha }}
          body: |
            Update Jacoco coverage report from commit ${{ github.sha }}
          add-paths: |
            .github/badges/*.svg
            www/coverage
      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: 'www/coverage/'
  build-store-image:
    needs: [build]
#    if: ${{ needs.changes.outputs.app == 'true' }}
    name: Build and store image
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: 'Build fakebank image'
        run: |
          docker build --file docker-compose/Dockerfile.fakebank . --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
